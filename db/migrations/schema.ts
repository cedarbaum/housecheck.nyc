import { pgTable, text, timestamp, index, integer, numeric, char, date, smallint, boolean, bigint, doublePrecision, primaryKey } from "drizzle-orm/pg-core"
import { sql } from "drizzle-orm"



export const metadata = pgTable("metadata", {
	dataset: text().primaryKey().notNull(),
	status: text().notNull(),
	lastUpdated: timestamp("last_updated", { mode: 'string' }),
	startDate: timestamp("start_date", { mode: 'string' }),
	endDate: timestamp("end_date", { mode: 'string' }),
	dateRangePrecision: text("date_range_precision"),
	href: text(),
	version: text(),
});

export const hpdLitigations = pgTable("hpd_litigations", {
	litigationid: integer().primaryKey().notNull(),
	buildingid: integer(),
	boro: integer(),
	housenumber: text(),
	streetname: text(),
	zip: text(),
	block: integer(),
	lot: integer(),
	casetype: text(),
	caseopendate: timestamp({ mode: 'string' }),
	casestatus: text(),
	openjudgement: text(),
	findingofharassment: text(),
	findingdate: timestamp({ mode: 'string' }),
	penalty: text(),
	respondent: text(),
	latitude: numeric(),
	longitude: numeric(),
	communitydistrict: text(),
	councildistrict: text(),
	censustract: text(),
	bin: char({ length: 7 }),
	bbl: char({ length: 10 }),
	nta: text(),
}, (table) => [
	index("hpd_litigations_bbl_idx").using("btree", table.bbl.asc().nullsLast().op("bpchar_ops")),
	index("hpd_litigations_bbl_idx1").using("btree", table.bbl.asc().nullsLast().op("bpchar_ops")),
	index("hpd_litigations_bbl_idx2").using("btree", table.bbl.asc().nullsLast().op("bpchar_ops")),
	index("hpd_litigations_bbl_idx3").using("btree", table.bbl.asc().nullsLast().op("bpchar_ops")),
	index("hpd_litigations_bin_idx").using("btree", table.bin.asc().nullsLast().op("bpchar_ops")),
	index("hpd_litigations_bin_idx1").using("btree", table.bin.asc().nullsLast().op("bpchar_ops")),
	index("hpd_litigations_bin_idx2").using("btree", table.bin.asc().nullsLast().op("bpchar_ops")),
	index("hpd_litigations_bin_idx3").using("btree", table.bin.asc().nullsLast().op("bpchar_ops")),
	index("hpd_litigations_boro_idx").using("btree", table.boro.asc().nullsLast().op("int4_ops")),
	index("hpd_litigations_boro_idx1").using("btree", table.boro.asc().nullsLast().op("int4_ops")),
	index("hpd_litigations_boro_idx2").using("btree", table.boro.asc().nullsLast().op("int4_ops")),
	index("hpd_litigations_boro_idx3").using("btree", table.boro.asc().nullsLast().op("int4_ops")),
	index("hpd_litigations_housenumber_idx").using("btree", table.housenumber.asc().nullsLast().op("text_ops")),
	index("hpd_litigations_housenumber_idx1").using("btree", table.housenumber.asc().nullsLast().op("text_ops")),
	index("hpd_litigations_housenumber_idx2").using("btree", table.housenumber.asc().nullsLast().op("text_ops")),
	index("hpd_litigations_housenumber_idx3").using("btree", table.housenumber.asc().nullsLast().op("text_ops")),
	index("hpd_litigations_streetname_idx").using("btree", table.streetname.asc().nullsLast().op("text_ops")),
	index("hpd_litigations_streetname_idx1").using("btree", table.streetname.asc().nullsLast().op("text_ops")),
	index("hpd_litigations_streetname_idx2").using("btree", table.streetname.asc().nullsLast().op("text_ops")),
	index("hpd_litigations_streetname_idx3").using("btree", table.streetname.asc().nullsLast().op("text_ops")),
]);

export const hpdVacateorders = pgTable("hpd_vacateorders", {
	buildingid: integer(),
	registrationid: integer(),
	borough: text(),
	number: text(),
	street: text(),
	vacateordernumber: integer().primaryKey().notNull(),
	primaryvacatereason: text(),
	vacatetype: text(),
	vacateeffectivedate: date(),
	rescinddate: date(),
	numberofvacatedunits: integer(),
	postcode: text(),
	latitude: numeric(),
	longitude: numeric(),
	communityboard: integer(),
	councildistrict: integer(),
	censustract: text(),
	bin: char({ length: 7 }),
	bbl: char({ length: 10 }),
	nta: text(),
}, (table) => [
	index("hpd_vacateorders_bbl_idx").using("btree", table.bbl.asc().nullsLast().op("bpchar_ops")),
	index("hpd_vacateorders_bbl_idx1").using("btree", table.bbl.asc().nullsLast().op("bpchar_ops")),
	index("hpd_vacateorders_bbl_idx2").using("btree", table.bbl.asc().nullsLast().op("bpchar_ops")),
	index("hpd_vacateorders_bbl_idx3").using("btree", table.bbl.asc().nullsLast().op("bpchar_ops")),
	index("hpd_vacateorders_bin_idx").using("btree", table.bin.asc().nullsLast().op("bpchar_ops")),
	index("hpd_vacateorders_bin_idx1").using("btree", table.bin.asc().nullsLast().op("bpchar_ops")),
	index("hpd_vacateorders_bin_idx2").using("btree", table.bin.asc().nullsLast().op("bpchar_ops")),
	index("hpd_vacateorders_bin_idx3").using("btree", table.bin.asc().nullsLast().op("bpchar_ops")),
	index("hpd_vacateorders_borough_idx").using("btree", table.borough.asc().nullsLast().op("text_ops")),
	index("hpd_vacateorders_borough_idx1").using("btree", table.borough.asc().nullsLast().op("text_ops")),
	index("hpd_vacateorders_borough_idx2").using("btree", table.borough.asc().nullsLast().op("text_ops")),
	index("hpd_vacateorders_borough_idx3").using("btree", table.borough.asc().nullsLast().op("text_ops")),
	index("hpd_vacateorders_number_idx").using("btree", table.number.asc().nullsLast().op("text_ops")),
	index("hpd_vacateorders_number_idx1").using("btree", table.number.asc().nullsLast().op("text_ops")),
	index("hpd_vacateorders_number_idx2").using("btree", table.number.asc().nullsLast().op("text_ops")),
	index("hpd_vacateorders_number_idx3").using("btree", table.number.asc().nullsLast().op("text_ops")),
	index("hpd_vacateorders_street_idx").using("btree", table.street.asc().nullsLast().op("text_ops")),
	index("hpd_vacateorders_street_idx1").using("btree", table.street.asc().nullsLast().op("text_ops")),
	index("hpd_vacateorders_street_idx2").using("btree", table.street.asc().nullsLast().op("text_ops")),
	index("hpd_vacateorders_street_idx3").using("btree", table.street.asc().nullsLast().op("text_ops")),
]);

export const hpdViolations = pgTable("hpd_violations", {
	violationid: integer().primaryKey().notNull(),
	buildingid: integer(),
	registrationid: integer(),
	boroid: char({ length: 1 }),
	borough: text(),
	housenumber: text(),
	lowhousenumber: text(),
	highhousenumber: text(),
	streetname: text(),
	streetcode: text(),
	postcode: char({ length: 5 }),
	apartment: text(),
	story: text(),
	block: integer(),
	lot: integer(),
	class: char({ length: 1 }),
	inspectiondate: date(),
	approveddate: date(),
	originalcertifybydate: date(),
	originalcorrectbydate: date(),
	newcertifybydate: date(),
	newcorrectbydate: date(),
	certifieddate: date(),
	ordernumber: text(),
	novid: integer(),
	novdescription: text(),
	novissueddate: date(),
	currentstatusid: smallint(),
	currentstatus: text(),
	currentstatusdate: date(),
	novtype: text(),
	violationstatus: text(),
	latitude: numeric(),
	longitude: numeric(),
	communityboard: text(),
	councildistrict: smallint(),
	censustract: text(),
	bin: char({ length: 7 }),
	bbl: char({ length: 10 }),
	nta: text(),
	rentimpairing: boolean(),
}, (table) => [
	index("hpd_violations_bbl_idx").using("btree", table.bbl.asc().nullsLast().op("bpchar_ops")),
	index("hpd_violations_bin_idx").using("btree", table.bin.asc().nullsLast().op("bpchar_ops")),
	index("hpd_violations_borough_idx").using("btree", table.borough.asc().nullsLast().op("text_ops")),
	index("hpd_violations_housenumber_idx").using("btree", table.housenumber.asc().nullsLast().op("text_ops")),
	index("hpd_violations_streetname_idx").using("btree", table.streetname.asc().nullsLast().op("text_ops")),
]);

export const plutoLatest = pgTable("pluto_latest", {
	borough: text(),
	block: integer(),
	lot: integer(),
	communityboard: smallint(),
	censustract2010: text(),
	cb2010: text(),
	schooldist: smallint(),
	councildistrict: smallint(),
	postcode: char({ length: 5 }),
	firecomp: text(),
	policeprct: text(),
	healtharea: text(),
	sanitboro: char({ length: 1 }),
	sanitsub: char({ length: 2 }),
	address: text(),
	zonedist1: text(),
	zonedist2: text(),
	zonedist3: text(),
	zonedist4: text(),
	overlay1: text(),
	overlay2: text(),
	spdist1: text(),
	spdist2: text(),
	spdist3: text(),
	ltdheight: text(),
	splitzone: boolean(),
	bldgclass: char({ length: 2 }),
	landuse: smallint(),
	easements: text(),
	ownertype: char({ length: 1 }),
	ownername: text(),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	lotarea: bigint({ mode: "number" }),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	bldgarea: bigint({ mode: "number" }),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	comarea: bigint({ mode: "number" }),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	resarea: bigint({ mode: "number" }),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	officearea: bigint({ mode: "number" }),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	retailarea: bigint({ mode: "number" }),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	garagearea: bigint({ mode: "number" }),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	strgearea: bigint({ mode: "number" }),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	factryarea: bigint({ mode: "number" }),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	otherarea: bigint({ mode: "number" }),
	areasource: text(),
	numbldgs: integer(),
	numfloors: numeric(),
	unitsres: integer(),
	unitstotal: integer(),
	lotfront: numeric(),
	lotdepth: numeric(),
	bldgfront: numeric(),
	bldgdepth: numeric(),
	ext: text(),
	proxcode: char({ length: 1 }),
	irrlotcode: boolean(),
	lottype: char({ length: 1 }),
	bsmtcode: char({ length: 1 }),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	assessland: bigint({ mode: "number" }),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	assesstot: bigint({ mode: "number" }),
	// You can use { mode: "bigint" } if numbers are exceeding js number limitations
	exempttot: bigint({ mode: "number" }),
	yearbuilt: smallint(),
	yearalter1: smallint(),
	yearalter2: smallint(),
	histdist: text(),
	landmark: text(),
	builtfar: numeric(),
	residfar: numeric(),
	commfar: numeric(),
	facilfar: numeric(),
	borocode: char({ length: 1 }),
	bbl: char({ length: 10 }).primaryKey().notNull(),
	condono: text(),
	tract2010: text(),
	xcoord: integer(),
	ycoord: integer(),
	latitude: doublePrecision(),
	longitude: doublePrecision(),
	zonemap: text(),
	zmcode: char({ length: 1 }),
	sanborn: text(),
	taxmap: text(),
	edesignum: text(),
	appbbl: char({ length: 10 }),
	appdate: date(),
	plutomapid: char({ length: 1 }),
	version: text(),
	sanitdistrict: smallint(),
	healthcenterdistrict: smallint(),
	firm07Flag: char({ length: 1 }),
	pfirm15Flag: char({ length: 1 }),
	geom: text(),
	dcpedited: text(),
	notes: text(),
}, (table) => [
	index("pluto_latest_address_idx").using("btree", table.address.asc().nullsLast().op("text_ops")),
	index("pluto_latest_borough_idx").using("btree", table.borough.asc().nullsLast().op("text_ops")),
]);

export const dobViolations = pgTable("dob_violations", {
	bbl: char({ length: 10 }),
	isndobbisviol: text(),
	boro: char({ length: 1 }),
	bin: char({ length: 7 }),
	block: text(),
	lot: text(),
	issuedate: date(),
	violationtypecode: text(),
	violationnumber: text(),
	housenumber: text(),
	street: text(),
	dispositiondate: date(),
	dispositioncomments: text(),
	devicenumber: text(),
	description: text(),
	ecbnumber: text(),
	number: text().primaryKey().notNull(),
	violationcategory: text(),
	violationtype: text(),
}, (table) => [
	index("dob_violations_bbl_idx").using("btree", table.bbl.asc().nullsLast().op("bpchar_ops")),
	index("dob_violations_bbl_idx1").using("btree", table.bbl.asc().nullsLast().op("bpchar_ops")),
	index("dob_violations_bbl_idx2").using("btree", table.bbl.asc().nullsLast().op("bpchar_ops")),
	index("dob_violations_bbl_idx3").using("btree", table.bbl.asc().nullsLast().op("bpchar_ops")),
	index("dob_violations_bin_idx").using("btree", table.bin.asc().nullsLast().op("bpchar_ops")),
	index("dob_violations_bin_idx1").using("btree", table.bin.asc().nullsLast().op("bpchar_ops")),
	index("dob_violations_bin_idx2").using("btree", table.bin.asc().nullsLast().op("bpchar_ops")),
	index("dob_violations_bin_idx3").using("btree", table.bin.asc().nullsLast().op("bpchar_ops")),
	index("dob_violations_boro_idx").using("btree", table.boro.asc().nullsLast().op("bpchar_ops")),
	index("dob_violations_boro_idx1").using("btree", table.boro.asc().nullsLast().op("bpchar_ops")),
	index("dob_violations_boro_idx2").using("btree", table.boro.asc().nullsLast().op("bpchar_ops")),
	index("dob_violations_boro_idx3").using("btree", table.boro.asc().nullsLast().op("bpchar_ops")),
	index("dob_violations_housenumber_idx").using("btree", table.housenumber.asc().nullsLast().op("text_ops")),
	index("dob_violations_housenumber_idx1").using("btree", table.housenumber.asc().nullsLast().op("text_ops")),
	index("dob_violations_housenumber_idx2").using("btree", table.housenumber.asc().nullsLast().op("text_ops")),
	index("dob_violations_housenumber_idx3").using("btree", table.housenumber.asc().nullsLast().op("text_ops")),
	index("dob_violations_street_idx").using("btree", table.street.asc().nullsLast().op("text_ops")),
	index("dob_violations_street_idx1").using("btree", table.street.asc().nullsLast().op("text_ops")),
	index("dob_violations_street_idx2").using("btree", table.street.asc().nullsLast().op("text_ops")),
	index("dob_violations_street_idx3").using("btree", table.street.asc().nullsLast().op("text_ops")),
]);

export const dobVacateOrders = pgTable("dob_vacate_orders", {
	lastdispositiondatedateofissuanceofvacate: date().notNull(),
	lastdispositionyear: integer(),
	housenumber: text().notNull(),
	streetname: text().notNull(),
	boroughname: text(),
	zipcode: char({ length: 5 }),
	block: integer(),
	lot: integer(),
	complaintcategorydescription: text().notNull(),
	lastdispositioncodedescription: text().notNull(),
	bbl: char({ length: 10 }),
}, (table) => [
	index("dob_vacate_orders_bbl_idx").using("btree", table.bbl.asc().nullsLast().op("bpchar_ops")),
	index("dob_vacate_orders_bbl_idx1").using("btree", table.bbl.asc().nullsLast().op("bpchar_ops")),
	index("dob_vacate_orders_boroughname_idx").using("btree", table.boroughname.asc().nullsLast().op("text_ops")),
	index("dob_vacate_orders_boroughname_idx1").using("btree", table.boroughname.asc().nullsLast().op("text_ops")),
	primaryKey({ columns: [table.lastdispositiondatedateofissuanceofvacate, table.housenumber, table.streetname, table.complaintcategorydescription, table.lastdispositioncodedescription], name: "dob_vacate_orders_pkey"}),
]);

export const dobComplaints = pgTable("dob_complaints", {
	complaintnumber: integer().notNull(),
	status: text().notNull(),
	dateentered: date().notNull(),
	housenumber: text(),
	zipcode: text(),
	housestreet: text(),
	bin: char({ length: 7 }).notNull(),
	communityboard: integer(),
	specialdistrict: text(),
	complaintcategory: text().notNull(),
	unit: text(),
	dispositiondate: date(),
	dispositioncode: text(),
	inspectiondate: date(),
	dobrundate: date().notNull(),
}, (table) => [
	index("dob_complaints_housenumber_idx").using("btree", table.housenumber.asc().nullsLast().op("text_ops")),
	index("dob_complaints_housenumber_idx1").using("btree", table.housenumber.asc().nullsLast().op("text_ops")),
	index("dob_complaints_housenumber_idx2").using("btree", table.housenumber.asc().nullsLast().op("text_ops")),
	index("dob_complaints_housenumber_idx3").using("btree", table.housenumber.asc().nullsLast().op("text_ops")),
	index("dob_complaints_housestreet_idx").using("btree", table.housestreet.asc().nullsLast().op("text_ops")),
	index("dob_complaints_housestreet_idx1").using("btree", table.housestreet.asc().nullsLast().op("text_ops")),
	index("dob_complaints_housestreet_idx2").using("btree", table.housestreet.asc().nullsLast().op("text_ops")),
	index("dob_complaints_housestreet_idx3").using("btree", table.housestreet.asc().nullsLast().op("text_ops")),
	index("dob_complaints_zipcode_idx").using("btree", table.zipcode.asc().nullsLast().op("text_ops")),
	index("dob_complaints_zipcode_idx1").using("btree", table.zipcode.asc().nullsLast().op("text_ops")),
	index("dob_complaints_zipcode_idx2").using("btree", table.zipcode.asc().nullsLast().op("text_ops")),
	index("dob_complaints_zipcode_idx3").using("btree", table.zipcode.asc().nullsLast().op("text_ops")),
	primaryKey({ columns: [table.complaintnumber, table.status, table.dateentered, table.bin, table.complaintcategory, table.dobrundate], name: "dob_complaints_pkey"}),
]);

export const hpdComplaintsAndProblems = pgTable("hpd_complaints_and_problems", {
	receiveddate: date(),
	problemid: integer().notNull(),
	complaintid: integer().notNull(),
	buildingid: integer(),
	borough: text(),
	housenumber: text(),
	streetname: text(),
	postcode: text(),
	block: integer(),
	lot: integer(),
	apartment: text(),
	communityboard: integer(),
	unittype: text(),
	spacetype: text(),
	type: text(),
	majorcategory: text(),
	minorcategory: text(),
	problemcode: text(),
	complaintstatus: text(),
	complaintstatusdate: date(),
	problemstatus: text(),
	problemstatusdate: date(),
	statusdescription: text(),
	problemduplicateflag: boolean(),
	complaintanonymousflag: boolean(),
	uniquekey: text(),
	latitude: numeric(),
	longitude: numeric(),
	councildistrict: char({ length: 2 }),
	censustract: text(),
	bin: char({ length: 7 }),
	bbl: char({ length: 10 }),
	nta: text(),
}, (table) => [
	index("hpd_complaints_and_problems_bbl_idx").using("btree", table.bbl.asc().nullsLast().op("bpchar_ops")),
	index("hpd_complaints_and_problems_borough_idx").using("btree", table.borough.asc().nullsLast().op("text_ops")),
	index("hpd_complaints_and_problems_buildingid_idx").using("btree", table.buildingid.asc().nullsLast().op("int4_ops")),
	index("hpd_complaints_and_problems_housenumber_idx").using("btree", table.housenumber.asc().nullsLast().op("text_ops")),
	index("hpd_complaints_and_problems_streetname_idx").using("btree", table.streetname.asc().nullsLast().op("text_ops")),
	primaryKey({ columns: [table.problemid, table.complaintid], name: "hpd_complaints_and_problems_pkey"}),
]);
